import{F as j,v as J,f as T,c as B,a as K,b as k,u as Q,T as X,d as F,V as q,e as W,s as Y,g as Z,l as _,h as $,N as ee,i as te,j as ae,W as ne,S as re,O as ie,M as oe,P as se,R as D,k as ue,m as le,n as V,C as G,o as de,p as ce,q as me,r as fe,t as we,w as pe,x as he}from"./PointerManager-DkWebD9_.js";const ve=j(([t=T(1),a=T(1),d=T(1)])=>{const f=J(0,2,1).mul(.3333333333333333).add(t);return B(K(k(f).mul(6).sub(3)).sub(1),0,1).sub(1).mul(a).add(1).mul(d)}),xe=()=>{const t=Q(new X),a=F(new q),d=F(1),f=W(Y.xy).mul(a),i=W(f.x,f.y.oneMinus()),e=t.sample(i).toVar(),I=k(Z(e.y,e.x).mul(1/(Math.PI*2))).mul(2).sub(1).abs().mul(-1).add(1).mul(1/6).add(d),O=_(e.xy),U=B(O.mul(40),.3,.9),L=$(ve(I,U,.9),1),S=new ee;return S.vertexNode=te(),S.fragmentNode=L,ae(S,{uTexture:t,uTextureSize:a,uTimeStep:d})},u={pixelRatio:.5,solverIteration:5,forceRadius:20,forceCoefficient:500,dissipation:.96};let N=0;const c=new pe;let n,x,R,v,p=Math.round(window.innerWidth*window.devicePixelRatio*u.pixelRatio),m=Math.round(window.innerHeight*window.devicePixelRatio*u.pixelRatio),l=new q,o,s,y,b,M,P,z,g;await ge();E(performance.now());async function ge(){n=new ne({antialias:!1,forceWebGL:!1}),await n.init(),n.setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(n.domElement),x=new re,R=new ie(-1,1,1,-1,0,1),v=new oe(new se(2,2)),x.add(v);const t={wrapS:G,wrapT:G,minFilter:V,magFilter:V,format:le,type:ue,depthBuffer:!1,stencilBuffer:!1};o=new D(p,m,t),s=new D(p,m,t),A(o),A(s),y=de(),b=ce(),M=me(),P=fe(),z=we(),g=xe(),await Se(g),window.addEventListener("resize",H),c.init(),H()}function H(){n.setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight);const t=window.innerWidth*window.devicePixelRatio,a=window.innerHeight*window.devicePixelRatio;p=Math.round(t*u.pixelRatio),m=Math.round(a*u.pixelRatio),o.setSize(p,m),s.setSize(p,m),c.resizeTarget(u.pixelRatio,n.backend.coordinateSystem===he?m:0),l.set(1/p,1/m),y.uniforms.uTexelSize.value.copy(l),b.uniforms.uTexelSize.value.copy(l),M.uniforms.uTexelSize.value.copy(l),P.uniforms.uTexelSize.value.copy(l),z.uniforms.uTexelSize.value.copy(l),g.uniforms.uTextureSize.value.set(1/t,1/a)}function E(t){const a=(t-N)/1e3;if(c.isPointerDown){const i=y,e=i.uniforms,r=c.pointer.clone().sub(c.prevPointer).multiply(l).multiplyScalar(u.forceCoefficient);e.uData.value=o.texture,e.uForceCenter.value.copy(c.pointer.clone().multiply(l)),e.uForceDeltaV.value.copy(r),e.uForceRadius.value=u.forceRadius,w(i,s),h()}const d=Math.max(Math.floor(a*240),1),f=a/d;for(let i=0;i<d;i++){{const e=b,r=e.uniforms;r.uData.value=o.texture,r.uDeltaT.value=f,r.uDissipation.value=u.dissipation,w(e,s),h()}{const e=M,r=e.uniforms;r.uData.value=o.texture,w(e,s),h()}for(let e=0;e<u.solverIteration;e++){const r=P,C=r.uniforms;C.uData.value=o.texture,w(r,s),h()}{const e=z,r=e.uniforms;r.uData.value=o.texture,w(e,s),h()}}{const i=g,e=i.uniforms;e.uTexture.value=o.texture,e.uTimeStep.value=t*1e-4,w(i,null)}c.updatePreviousPointer(),N=t,requestAnimationFrame(E)}function A(t){n.setRenderTarget(t),n.clearColor(),n.setRenderTarget(null)}function w(t,a){v.material=t,n.setRenderTarget(a),n.render(x,R),n.setRenderTarget(null)}function h(){[o,s]=[s,o]}async function Se(t){v.material=t;const a=await n.debug.getShaderAsync(x,R,v);console.log(a.vertexShader),console.log(a.fragmentShader)}
