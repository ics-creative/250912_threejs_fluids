import{u as G,T as W,a as i,V as x,v as l,s as _,e as me,b as J,c as Q,N as X,d as Y,f as Z,m as be,g as H,l as Fe,h as Me,i as Pe,p as Ce,j as fe,k as Ge,n as We,P as Be,W as He,S as Ie,O as Ne,M as Ae,o as Le,R as I,F as Ve,q as ue,r as le,C as N,H as ke,L as U,t as je,w as Ee,x as qe,y as Oe,z as Ue,A as Ke,B as Je,D as _e,E as Qe}from"./PointerManager-NTn3o2U3.js";/* empty css              */const Xe=()=>{const t=G(new W),a=G(new W),u=i(new x),o=i(new x),e=i(new x),n=i(new x),r=i(0),m=i(0),T=i(0),D=l(_.xy).mul(o),c=l(D.x,D.y.oneMinus()),V=he=>{const Te=l(he).mul(n),Re=be(n.x.div(e.x),n.y.div(e.y)),se=l(e).mul(Re),ze=l(n).sub(se).mul(.5),M=l(Te).sub(ze).div(se),De=H(0,M.x).mul(H(0,M.y)).mul(H(M.x,1)).mul(H(M.y,1));return a.sample(M).rgb.mul(De)},k=t.sample(c).r,j=t.sample(c.sub(l(u.x,0))).r,E=t.sample(c.add(l(u.x,0))).r,q=t.sample(c.sub(l(0,u.y))).r,F=t.sample(c.add(l(0,u.y))).r,we=l(E.sub(j).mul(.5),F.sub(q).mul(.5)),ve=c.add(we.mul(r)),xe=V(ve),ie=me(m.mul(k).mul(-1)),ge=J(.8).mul(T.mul(J(1).sub(ie))),ye=xe.mul(ie).add(ge),Se=Q(ye,1),O=new X;return O.vertexNode=Y(),O.fragmentNode=Se,Z(O,{uDye:t,uBackground:a,uDyeTexel:u,uScreenTexel:o,uBGSizePx:e,uScreenSizePx:n,uRefractAmp:r,uDensityK:m,uSmokeGain:T})},Ye=()=>{const t=G(new W),a=G(new W),u=i(new x),o=i(new x),e=i(0),n=i(0),r=i(0),m=l(_.xy).mul(o),T=t.sample(m).toVar(),D=e.mul(Fe(T.xy)),c=Me(.02,.1,D),V=m.sub(T.xy.mul(n).mul(e).mul(u).mul(c)),k=Pe(V,o),j=a.sample(k).rgb,E=Ce(.5,e.div(fe(r,1e-6))),q=Q(j.mul(E),1),F=new X;return F.vertexNode=Y(),F.fragmentNode=q,Z(F,{uData:t,uImage:a,uTexelSize:u,uTextureSize:o,uDeltaT:e,uDyeAdvectScale:n,uHalfLife:r})},Ze=()=>{const t=G(new W),a=i(new x),u=i(new x),o=i(0),e=i(0),n=l(_.xy).mul(a),r=t.sample(n).rgb.toVar(),m=n.sub(u).div(fe(l(o).mul(a),l(1e-6))),T=Ge(r.add(J(1).mul(e).mul(me(We(m,m).mul(-1)))),0,1),D=Q(T,1),c=new X;return c.vertexNode=Y(),c.fragmentNode=D,Z(c,{uImage:t,uTextureSize:a,uForceCenter:u,uForceRadius:o,uInjectGain:e})},w={pixelRatio:.5,solverIteration:5,forceRadius:35,forceCoefficient:500,dissipation:.995};let ce=0;const f=new Be;let s,A,$,B,b=Math.round(window.innerWidth*window.devicePixelRatio*w.pixelRatio),z=Math.round(window.innerHeight*window.devicePixelRatio*w.pixelRatio),p=new x,P=new x,d,v,R,g,S,ee,te,ae,ne,oe,re,L,h;await $e();pe(performance.now());async function $e(){s=new He({antialias:!1,forceWebGL:!1}),await s.init(),s.setPixelRatio(window.devicePixelRatio),s.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(s.domElement),A=new Ie,$=new Ne(-1,1,1,-1,0,1),B=new Ae(new Le(2,2)),A.add(B);const t={wrapS:N,wrapT:N,minFilter:le,magFilter:le,format:ue,type:Ve,depthBuffer:!1,stencilBuffer:!1};d=new I(b,z,t),v=new I(b,z,t),de(d),de(v);const a={wrapS:N,wrapT:N,minFilter:U,magFilter:U,format:ue,type:ke,depthBuffer:!1,stencilBuffer:!1};g=new I(window.innerWidth,window.innerHeight,a),S=new I(window.innerWidth,window.innerHeight,a),ee=je(),te=Ee(),ae=qe(),ne=Oe(),oe=Ue(),re=Ze(),L=Ye(),h=Xe(),await et(h),R=new Ke().load("texture_demo1.jpg",()=>{h.uniforms.uBGSizePx.value.set(R.width,R.height),K()}),R.minFilter=Je,R.magFilter=U,R.colorSpace=_e,h.uniforms.uBackground.value=R,window.addEventListener("resize",K),f.init(s.domElement),f.addEventListener("firstInteraction",()=>{document.querySelector("#overlay-hint").style.display="none"}),K()}function K(){s.setPixelRatio(window.devicePixelRatio),s.setSize(window.innerWidth,window.innerHeight);const t=window.innerWidth*window.devicePixelRatio,a=window.innerHeight*window.devicePixelRatio;b=Math.round(t*w.pixelRatio),z=Math.round(a*w.pixelRatio),d.setSize(b,z),v.setSize(b,z),g.setSize(t,a),S.setSize(t,a),f.resizeTarget(w.pixelRatio,s.backend.coordinateSystem===Qe?z:0),p.set(1/b,1/z),P.set(1/t,1/a),ee.uniforms.uTexelSize.value.copy(p),te.uniforms.uTexelSize.value.copy(p),ae.uniforms.uTexelSize.value.copy(p),ne.uniforms.uTexelSize.value.copy(p),oe.uniforms.uTexelSize.value.copy(p),re.uniforms.uTextureSize.value.copy(P),L.uniforms.uTexelSize.value.copy(p),L.uniforms.uTextureSize.value.copy(P),h.uniforms.uDyeTexel.value.copy(P),h.uniforms.uScreenTexel.value.copy(P),h.uniforms.uScreenSizePx.value.set(t,a)}function pe(t){const a=(t-ce)/1e3;if(f.isPointerDown){const o=ee,e=o.uniforms,n=f.pointer.clone().sub(f.prevPointer).multiply(p).multiplyScalar(w.forceCoefficient);e.uData.value=d.texture,e.uForceCenter.value.copy(f.pointer.clone().multiply(p)),e.uForceDeltaV.value.copy(n),e.uForceRadius.value=w.forceRadius,y(o,v),C()}const u=Math.min(Math.max(Math.floor(a*240),1),8);for(let o=0;o<u;o++){const e=a/u;{const n=te,r=n.uniforms;r.uData.value=d.texture,r.uDeltaT.value=e,r.uDissipation.value=w.dissipation,y(n,v),C()}{const n=ae,r=n.uniforms;r.uData.value=d.texture,y(n,v),C()}for(let n=0;n<w.solverIteration;n++){const r=ne,m=r.uniforms;m.uData.value=d.texture,y(r,v),C()}{const n=oe,r=n.uniforms;r.uData.value=d.texture,y(n,v),C()}}if(f.isPointerDown){const o=re,e=o.uniforms;e.uImage.value=g.texture,e.uForceCenter.value.copy(f.pointer.clone().multiply(p)),e.uForceRadius.value=w.forceRadius,e.uInjectGain.value=30,y(o,S),[g,S]=[S,g]}{const o=L,e=o.uniforms;e.uImage.value=g.texture,e.uData.value=d.texture,e.uDeltaT.value=a,e.uDyeAdvectScale.value=15,e.uHalfLife.value=.3,y(o,S),[g,S]=[S,g]}{const o=h,e=o.uniforms;e.uDye.value=g.texture,e.uRefractAmp.value=.9,e.uDensityK.value=.9,e.uSmokeGain.value=.8,y(o,null)}f.updatePreviousPointer(),ce=t,requestAnimationFrame(pe)}function de(t){s.setRenderTarget(t),s.clearColor(),s.setRenderTarget(null)}function y(t,a){B.material=t,s.setRenderTarget(a),s.render(A,$),s.setRenderTarget(null)}function C(){[d,v]=[v,d]}async function et(t){B.material=t;const a=await s.debug.getShaderAsync(A,$,B);console.log(a.vertexShader),console.log(a.fragmentShader)}
