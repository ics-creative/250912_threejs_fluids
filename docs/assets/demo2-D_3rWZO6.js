import{u as O,T as U,a as C,V as H,v as F,s as J,I as k,J as j,l as K,n as Q,c as X,N as Y,d as Z,f as _,P as $,W as ee,S as te,O as ae,M as ne,q as re,R as W,F as ie,r as oe,t as D,C as G,w as se,x as le,y as ue,z as de,A as ce,G as me}from"./PointerManager-ChHyotI4.js";/* empty css              */import{h as fe}from"./hsv2rgb-DZoVPHCW.js";const we=()=>{const t=O(new U),n=C(new H),w=C(1),v=F(J.xy).mul(n),o=F(v.x,v.y.oneMinus()),e=t.sample(o).toVar(),E=k(j(e.y,e.x).mul(1/(Math.PI*2))).mul(2).sub(1).abs().mul(-1).add(1).mul(1/6).add(w),I=K(e.xy),q=Q(I.mul(40),.3,.9),L=X(fe(E,q,.9),1),S=new Y;return S.vertexNode=Z(),S.fragmentNode=L,_(S,{uTexture:t,uTextureSize:n,uTimeStep:w})},l={pixelRatio:.5,solverIteration:5,forceRadius:20,forceCoefficient:500,dissipation:.96};let V=0;const d=new $;let a,x,T,h,f=Math.round(window.innerWidth*window.devicePixelRatio*l.pixelRatio),c=Math.round(window.innerHeight*window.devicePixelRatio*l.pixelRatio),u=new H,i,s,y,R,M,P,z,g;await pe();B(performance.now());async function pe(){a=new ee({antialias:!1,forceWebGL:!1}),await a.init(),a.setPixelRatio(window.devicePixelRatio),a.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(a.domElement),x=new te,T=new ae(-1,1,1,-1,0,1),h=new ne(new re(2,2)),x.add(h);const t={wrapS:G,wrapT:G,minFilter:D,magFilter:D,format:oe,type:ie,depthBuffer:!1,stencilBuffer:!1};i=new W(f,c,t),s=new W(f,c,t),A(i),A(s),y=se(),R=le(),M=ue(),P=de(),z=ce(),g=we(),await he(g),window.addEventListener("resize",N),d.init(a.domElement),d.addEventListener("firstInteraction",()=>{document.querySelector("#overlay-hint").style.display="none"}),N()}function N(){a.setPixelRatio(window.devicePixelRatio),a.setSize(window.innerWidth,window.innerHeight);const t=window.innerWidth*window.devicePixelRatio,n=window.innerHeight*window.devicePixelRatio;f=Math.round(t*l.pixelRatio),c=Math.round(n*l.pixelRatio),i.setSize(f,c),s.setSize(f,c),d.resizeTarget(l.pixelRatio,a.backend.coordinateSystem===me?c:0),u.set(1/f,1/c),y.uniforms.uTexelSize.value.copy(u),R.uniforms.uTexelSize.value.copy(u),M.uniforms.uTexelSize.value.copy(u),P.uniforms.uTexelSize.value.copy(u),z.uniforms.uTexelSize.value.copy(u),g.uniforms.uTextureSize.value.set(1/t,1/n)}function B(t){const n=(t-V)/1e3;if(d.isPointerDown){const o=y,e=o.uniforms,r=d.pointer.clone().sub(d.prevPointer).multiply(u).multiplyScalar(l.forceCoefficient);e.uData.value=i.texture,e.uForceCenter.value.copy(d.pointer.clone().multiply(u)),e.uForceDeltaV.value.copy(r),e.uForceRadius.value=l.forceRadius,m(o,s),p()}const w=Math.min(Math.max(Math.floor(n*240),1),8),v=n/w;for(let o=0;o<w;o++){{const e=R,r=e.uniforms;r.uData.value=i.texture,r.uDeltaT.value=v,r.uDissipation.value=l.dissipation,m(e,s),p()}{const e=M,r=e.uniforms;r.uData.value=i.texture,m(e,s),p()}for(let e=0;e<l.solverIteration;e++){const r=P,b=r.uniforms;b.uData.value=i.texture,m(r,s),p()}{const e=z,r=e.uniforms;r.uData.value=i.texture,m(e,s),p()}}{const o=g,e=o.uniforms;e.uTexture.value=i.texture,e.uTimeStep.value=t*1e-4,m(o,null)}d.updatePreviousPointer(),V=t,requestAnimationFrame(B)}function A(t){a.setRenderTarget(t),a.clearColor(),a.setRenderTarget(null)}function m(t,n){h.material=t,a.setRenderTarget(n),a.render(x,T),a.setRenderTarget(null)}function p(){[i,s]=[s,i]}async function he(t){h.material=t;const n=await a.debug.getShaderAsync(x,T,h);console.log(n.vertexShader),console.log(n.fragmentShader)}
